@page "/"
@inject IModalService Modal

@using Model
@using Services
@inject NavigationManager NavigationManager
@inject GameService GameField
@inject NotificationService notificationService
@inject ILanguageContainerService language

@if (GameField.Approved) {
    <button class="btn btn-primary" @onclick="BtnLocal" style="margin: 5px"><span class="oi" aria-hidden="true">&#x1F464;</span>&nbsp;@language.Keys["GameTypeSinge"]</button>
    <button class="btn btn-primary" @onclick="BtnNewRemote" style="margin: 5px"><span class="oi" aria-hidden="true">&#x1F465;</span>&nbsp;@language.Keys["GameTypeStartMulti"]</button>
    <button class="btn btn-primary" @onclick="BtnJoin" style="margin: 5px"><span class="oi" aria-hidden="true">&#x1F465;</span>&nbsp;@language.Keys["GameTypeJoinMulti"]</button>

    <div style="margin: 5px">
        @if (LocalGame)
        {

            <h2>@language.Keys["IndexStartNew"]</h2>

            <button class="btn btn-primary" @onclick="BtnStart"><span class="oi oi-media-play"></span> @language.Keys["IndexStart"]</button>

            <DiceGame.Pages.View.PlayerSettings></DiceGame.Pages.View.PlayerSettings>

            <DiceGame.Pages.View.NotificationSettings></DiceGame.Pages.View.NotificationSettings>
        }
        else
        {
            <DiceGame.Pages.View.PvPSettings></DiceGame.Pages.View.PvPSettings>

            if (NewRemoteGame)
            {
                <button @onclick="BtnStartRemote" class="btn btn-outline-danger">@language.Keys["IndexStartGame"]</button>
            }
            else
            {
                <p>@language.Keys["IndexWaitHost"]</p>
            }
        }
    </div>
} else {
    <svg style="grid-area: 3 / 9 / 4 / 10;" id="emoji" viewBox="0 0 72 72" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <g id="color" transform="rotate(0,35.61825,35.23585)">
            <polygon fill="#D0CFCE" points="58.0936,22.6076 35.6729,27.8442 13.9289,22.2732 35.6729,17.4173" />
            <polygon fill="#9B9B9A" points="58.2211,48.3473 36.0428,54.1045 35.6729,27.0042 58.1657,21.846" />
            <polygon fill="#D0CFCE" points="13.9856,47.957 35.7027,54.1045 35.6729,27.8442 22.6497,24.6986 13.9832,22.2957" />
        </g>
        <g id="hair" />
        <g id="skin" />
        <g id="skin-shadow" />
        <g id="line" transform="rotate(0,35.61825,35.23585)">
            <polyline fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="2.069" points="35.6352,54.0172 57.4698,48.7313 57.4698,21.7647 35.6167,26.5155 13.7667,21.7647 13.7667,48.7313 35.6013,54.0172 35.6013,30.3713" />
            <polyline fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="2.069" points="13.7667,21.7647 35.8082,16.4545 57.4698,21.7647" />
            <circle cx="21.2735" cy="32.9339" r="3" />
            <circle cx="27.2446" cy="44.3761" r="3" />
            <circle cx="41.767" cy="45.2211" r="3" />
            <circle cx="46.8274" cy="38.0668" r="3" />
            <circle cx="51.8878" cy="30.9124" r="3" />
            <ellipse cx="35.8312" cy="21.1219" rx="4" ry="1.6191" />
        </g>
    </svg>
}


    @code {
        bool LocalGame { get; set; }
        bool NewRemoteGame { get; set; }
        bool JoinGame { get; set; }
        String GameId { get; set; }


        protected override async Task OnInitializedAsync()
        {
            LocalGame = true;
            NewRemoteGame = false;
            JoinGame = false;

            GameField.OnApproved = () => InvokeAsync(StateHasChanged);

            var formModal = Modal.Show<DiceGame.Pages.View.StartupBanner>("Use");
            var result = await formModal.Result;            
        }

        public void BtnStart()
        {
            NavigationManager.NavigateTo("/Game");
        }

        public async Task BtnStartRemote()
        {
            GameField.SendStartPvPGame();
            InvokeAsync(StateHasChanged);
        }

        public void BtnLocal()
        {
            LocalGame = true;
            NewRemoteGame = false;
            JoinGame = false;
            InvokeAsync(StateHasChanged);
        }

        public async Task BtnNewRemote()
        {
            LocalGame = false;
            NewRemoteGame = true;
            JoinGame = false;
            GameField.JoinRequest = new DiceGame.Interfaces.Messages.JoinRequest() { GameName = $"New Game {DateTime.Now:ddMM HHmm}", Name = "Player 1", Id = "0" };

            var messageForm = Modal.Show<DiceGame.Pages.View.JoinGameSettings>("Game Setting");
            var result = await messageForm.Result;

            await GameField.ActivatePvP(null);
            InvokeAsync(StateHasChanged);
        }

        public async Task BtnJoin()
        {
            LocalGame = false;
            NewRemoteGame = false;
            JoinGame = true;
            GameField.JoinRequest = new DiceGame.Interfaces.Messages.JoinRequest() { GameName = "?", Name = "?", Id = "?" };
            await GameField.LoadPvPGames();

            var messageForm = Modal.Show<DiceGame.Pages.View.SelectGame>("Join Game");
            var result = await messageForm.Result;

            InvokeAsync(StateHasChanged);
        }
    }
