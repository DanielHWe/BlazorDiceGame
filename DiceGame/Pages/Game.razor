@page "/Game"
@inject IModalService Modal

@using Model
@using Services
@using System.Threading
@using View; 
@inject GameService GameField
@inject IToastService toastService
@inject NotificationService notificationService
@inject NavigationManager NavigationManager

@if (GameField != null && GameField.ActivePlayer != null)
{
    <h1>Turn of @GameField.ActivePlayer.Name</h1>
}
else
{
    <h1>Dice Game</h1>
}
<button class="btn btn-primary" @onclick="BtnDice" disabled="@GameField.DisableDice"><span class="oi" aria-hidden="true">&#x1f3b2;</span>Dice</button>
<button class="btn btn-primary" @onclick="BtnRefresh"><span class="oi oi-loop-circular" aria-hidden="true"></span>Refresh</button>
<button @onclick="ShowModal" class="btn btn-primary">Settings</button>
<button @onclick="ShowMovesModal" class="btn btn-primary">Moves</button>

<div class="dice-game">
    @if (GameField != null)
    {
        @foreach (var piece in GameField.GameField.Pieces)
        {
                <DiceGame.Pages.View.GamePieceView piece="@piece" OnClick="BtnKlick"></DiceGame.Pages.View.GamePieceView>
        }

        if (!GameField.DiceAnimation)
        {
            <p style="grid-area: 3 / 9 / 4 / 10;" id="dice" @onclick="BtnDice">@GameField.LastDiceView</p>
        }
        else
        {
            <svg style="grid-area: 3 / 9 / 4 / 10;" id="emoji" viewBox="0 0 72 72" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <g id="color" transform="rotate(@diceRollation,35.61825,35.23585)">
                    <polygon fill="#D0CFCE" points="58.0936,22.6076 35.6729,27.8442 13.9289,22.2732 35.6729,17.4173" />
                    <polygon fill="#9B9B9A" points="58.2211,48.3473 36.0428,54.1045 35.6729,27.0042 58.1657,21.846" />
                    <polygon fill="#D0CFCE" points="13.9856,47.957 35.7027,54.1045 35.6729,27.8442 22.6497,24.6986 13.9832,22.2957" />
                </g>
                <g id="hair" />
                <g id="skin" />
                <g id="skin-shadow" />
                <g id="line" transform="rotate(@diceRollation,35.61825,35.23585)">
                    <polyline fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="2.069" points="35.6352,54.0172 57.4698,48.7313 57.4698,21.7647 35.6167,26.5155 13.7667,21.7647 13.7667,48.7313 35.6013,54.0172 35.6013,30.3713" />
                    <polyline fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="2.069" points="13.7667,21.7647 35.8082,16.4545 57.4698,21.7647" />
                    <circle cx="21.2735" cy="32.9339" r="3" />
                    <circle cx="27.2446" cy="44.3761" r="3" />
                    <circle cx="41.767" cy="45.2211" r="3" />
                    <circle cx="46.8274" cy="38.0668" r="3" />
                    <circle cx="51.8878" cy="30.9124" r="3" />
                    <ellipse cx="35.8312" cy="21.1219" rx="4" ry="1.6191" />
                </g>
            </svg>
        }


        @foreach (var player in GameField.GameField.Player)
        {
            if (player == null || !player.IsPlaying) continue;
            var idx = player.Id + 1;
            if (player.IsActive)
            {
                if ((GameField.IsLocalGame || player.IsLocalPlayer))
                {
                    <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: bold;background-color: @player.BackColor;padding:2;height: 30px;" class="dice">@player.LastDiceSeries</p>
                    <button class="btn btn-primary" @onclick="BtnDice" autofocus style="grid-area:  @idx / 19; padding: 0;" disabled="@GameField.AllowMove"><span class="oi" aria-hidden="true">&#x1f3b2;</span></button>
                    <button class="btn btn-primary" @onclick="BtnMove" autofocus style="grid-area:  @idx / 20; padding: 0;" disabled="@GameField.AllowDice"><span class="oi oi-action-redo" aria-hidden="true"></span></button>
                }
                else
                {
                    <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: normal;background-color: @player.BackColor;padding:2;height: 30px;border: 3px groove green;" class="dice">@player.LastDiceSeries</p>
                }
            }
            else if (player.IsLocalPlayer)
            {
                <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: normal;background-color: @player.BackColor;padding:2;height: 30px;border: 3px groove grey;" class="dice">@player.LastDiceSeries</p>
            }
            else
            {
                <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: normal;background-color: @player.BackColor;padding:2;height: 30px;" class="dice">@player.LastDiceSeries</p>
            }
        }
    }
</div>

@code {    
    int diceRollation = 0;
    CancellationTokenSource _cts;
    CancellationToken _ct;

    protected override async Task OnInitializedAsync()
    {
        GameField.OnChange += PopupChanged;
        GameField.OnError += PopupError;
        GameField.OnDiceDone += DiceDone;
        GameField.UpdateCallbacks(ConnectionLost);
    }

    public void ConnectionLost()
    {
        NavigationManager.NavigateTo("/Index");
    }

    public async Task BtnDice()
    {
        if (!GameField.AllowDice) return;

        GameField.DiceAnimation = true;
        StateHasChanged();
        await GameField.DoDice();
        await Animate();
    }

    public async Task BtnRefresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task BtnMove()
    {
        var header = GameField.ActivePlayer.Name;
        var move = await GameField.DoMove();
        notificationService.OnMove(toastService, move, header);
        await InvokeAsync(StateHasChanged);
        await AnimateMove(move);
    }

    public async Task BtnKlick(IPieceModel piece)
    {
        var move = await GameField.TryMove(piece);
        if (move !=null)
        {
            StateHasChanged();
            await AnimateMove(move);
        }
    }

    async Task ShowModal()
    {
        var messageForm = Modal.Show<Settings>();
        var result = await messageForm.Result;
    }

    async Task ShowMovesModal()
    {
        var messageForm = Modal.Show<DiceGame.Pages.View.Moves>();
        var result = await messageForm.Result;
    }

    private void DiceDone(String diceView, String header)
    {
        InvokeAsync(Animate);
        InvokeAsync(StateHasChanged);
        if (!string.IsNullOrEmpty(header))
        {
            notificationService.OnDice(toastService, GameField.LastDiceView, header);
            notificationService.OnPossibleKick(toastService, GameField.GetPossibleKicks(), header);
        }
    }

    private void PopupChanged(String message)
    {
        InvokeAsync(StateHasChanged);
        if (!String.IsNullOrEmpty(message))
        {
            toastService.ShowInfo(message);
        }
    }

    private void PopupError(String message)
    {
        InvokeAsync(StateHasChanged);
        if (!String.IsNullOrEmpty(message))
        {
            toastService.ShowError(message, "Error");
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
    }

    public async Task Animate()
    {
        GameField.DiceAnimation = true;
        StateHasChanged();
        int i = 0;
        while (!_ct.IsCancellationRequested && i<15)
        {
            i++;
            diceRollation += 10;
            if (diceRollation >= 360) diceRollation -= 360;
            StateHasChanged();
            await Task.Delay(25);
        }
        GameField.DiceAnimation = false;
        StateHasChanged();
    }

    public async Task AnimateMove(IMoveModel model)
    {
        int i = 0;
        var curPos = model.StartPosition;
        while (!_ct.IsCancellationRequested && i < 101)
        {
            curPos = model.StartPosition;
            do
            {
                curPos.MovedOver = true;
                curPos = curPos.NextPiece;
            }
            while (curPos.Id != model.EndPosition.Id);
            StateHasChanged();
            await Task.Delay(25);
            i += 10;
        }
        while (!_ct.IsCancellationRequested && i > 1)
        {
            curPos = model.StartPosition;
            do
            {
                curPos.MovedOver = false;
                curPos = curPos.NextPiece;
            }
            while (curPos.Id != model.EndPosition.Id);
            StateHasChanged();
            await Task.Delay(25);
            i -= 10;
        }        
        while (curPos.Id != model.EndPosition.Id);
        StateHasChanged();
    }
}