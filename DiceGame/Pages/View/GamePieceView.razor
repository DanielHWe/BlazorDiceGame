@using Model
@using Services
@inject GameService GameField

<svg id="@piece.Id"
     @onclick="@(e => BtnKlick(piece))"
     width="32"
     height="32"
     style="grid-area: @piece.X / @piece.Y ;"
     viewBox="0 0 32 32">
    <defs>
        <filter id="f3" x="0" y="0" width="200%" height="200%">
            <feOffset result="offOut" in="SourceAlpha" dx="5" dy="5" />
            <feGaussianBlur result="blurOut" in="offOut" stdDeviation="10" />
            <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
        </filter>
        <filter id="f2" x="0" y="0" width="200%" height="200%">
            <feOffset result="offOut" in="SourceGraphic" dx="5" dy="5" />
            <feGaussianBlur result="blurOut" in="offOut" stdDeviation="10" />
            <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
        </filter>
    </defs>
    @if (piece.Changed && GameField.AllowMove && !GameField.DiceAnimation)
    {
        <rect stroke-width="1" stroke="#ff9900" id="bletrisbox" height="32" width="32" fill="#ff9900" x="0" y="0"></rect>
    }
    else
    {
        <rect stroke-width="1" stroke="#000000" id="bletrisbox" height="32" width="32" fill="@piece.Color" x="0" y="0"></rect>
    }
    @if (piece.MovedOver)
    {
        <rect stroke-width="1" stroke="#000000" id="bletrisbox" height="8" width="8" fill="black" x="12" y="12"></rect>
    }

    @if (piece.Changed && !GameField.DiceAnimation)
    {
        <circle stroke-width="1" stroke="@piece.ChangedColor" fill="#F2F5A9" cx="16" cy="16" r="14"></circle>

    }
    @if (piece.Meeple != null)
    {
        if (piece.Meeple.Player.IsActive)
        {
            <path stroke-width="2" stroke="@piece.Meeple.Player.MarkColor" fill="@piece.Meeple.Player.Color" filter="url(#f2)"
                  d="M 23.97186,24.165478 H 6.7861122 L 12.25803,9.2803718 c -2.5349163,-6.9266389 8.335882,-7.0954101 6.206748,0 z"
                  id="path3713" />
        }
        else if (piece.Meeple.Player.IsPlaying)
        {
            <path stroke-width="1" stroke="#000000" fill="@piece.Meeple.Player.Color" filter="url(#f3)"
                  d="M 23.97186,24.165478 H 6.7861122 L 12.25803,9.2803718 c -2.5349163,-6.9266389 8.335882,-7.0954101 6.206748,0 z"
                  id="path3713" />
        }
    }
    @if (piece.IsPossibleTargetOfMove && GameField.AllowMove && !GameField.DiceAnimation)
    {
        <path fill="@GameField.ActivePlayer.Color" d="M3.5 0c-1.93 0-3.5 1.57-3.5 3.5 0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5v.5h-1l2 2 2-2h-1v-.5c0-1.93-1.57-3.5-3.5-3.5z" transform="translate(5 10) scale (2.5)" />
    }
</svg>

@code {
    [Parameter]
    public IPieceModel piece { get; set; }

    [Parameter] public EventCallback<IPieceModel> OnClick { get; set; }

    public async Task BtnKlick(IPieceModel piece)
    {
        await OnClick.InvokeAsync(this.piece);
    }


}
