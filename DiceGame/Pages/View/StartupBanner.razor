@using Services
@inject ILanguageContainerService language
@inject IToastService toastService
@inject GameService GameField

<h3>@language.Keys["StartTitle"]</h3>

<div class="row">
    <button class="btn btn-primary" style="margin: 5px" @onclick='() => SetLanguage("de-DE")'>Deutsch</button>
    <button class="btn btn-primary" style="margin: 5px" @onclick='() => SetLanguage("en-US")'>Englisch</button>
</div>

<p>
    @language.Keys["StartDescription"]<br />
    @language.Keys["StartWarenty"]<br />
    @language.Keys["StartMoreInfo"] <a href="https://github.com/DanielHWe/BlazorDiceGame">https://github.com/DanielHWe/BlazorDiceGame</a>
</p>
@if (Approved)
{
    <p>
        <input type="checkbox" checked @onchange="@(async (e) =>
              await ToggleApprovedAsync(false))" />&nbsp;@language.Keys["StartAcceptterms"]
        </p>
    }
    else
    {
        <p>
            <input type="checkbox" @onchange="@(async (e) =>
              await ToggleApprovedAsync(true))" />&nbsp;Accept Terms of use
        </p>
    }
<div class="row">
    <p>@language.Keys["Password"]: <input @bind="Passwd" @bind:event="oninput" /></p>
</div>
<div class="row">
    <button class="btn btn-primary" @onclick="BtnLocal" style="margin: 5px" disabled="@IsDisabled"><span class="oi" aria-hidden="true">&#x1F464;</span>&nbsp;@language.Keys["GameTypeSinge"]</button>
    <button class="btn btn-primary" @onclick="BtnNewRemote" style="margin: 5px" disabled="@IsDisabled"><span class="oi" aria-hidden="true">&#x1F465;</span>&nbsp;@language.Keys["GameTypeStartMulti"]</button>
    <button class="btn btn-primary" @onclick="BtnJoin" style="margin: 5px" disabled="@IsDisabled"><span class="oi" aria-hidden="true">&#x1F465;</span>&nbsp;@language.Keys["GameTypeJoinMulti"]</button>
</div>

@code {
    private bool _approved;
    protected bool Approved
    {
        get { return _approved; }
        set
        {
            _approved = value;
            IsDisabled = !value;
        }
    }
    protected bool IsDisabled { get; set; } = true;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    public string Message { get; set; }

    public string Passwd { get; set; }

    async Task ToggleApprovedAsync(bool approved)
    {

        if (approved)
        {
            Approved = true;
        }
        else
        {
            Approved = false;
        }
    }

    async Task BtnLocal()
    {
        if (Passwd == "Ok")
        {
            GameField.Approved = true;
            if (GameField.OnApproved != null) GameField.OnApproved();
            BlazoredModal.Close(ModalResult.Ok($"local"));
        }
        else
        {
            toastService.ShowError(language.Keys["WrongPwd"]);
        }
    }

    async Task BtnNewRemote()
    {
        if (Passwd == "Ok")
        {
            GameField.Approved = true;
            if (GameField.OnApproved != null) GameField.OnApproved();
            BlazoredModal.Close(ModalResult.Ok($"remote"));
        }
        else
        {
            toastService.ShowError(language.Keys["WrongPwd"]);
        }
    }

    async Task BtnJoin()
    {
        if (Passwd == "Ok")
        {
            GameField.Approved = true;
            if (GameField.OnApproved != null) GameField.OnApproved();
            BlazoredModal.Close(ModalResult.Ok($"join"));
        }
        else
        {
            toastService.ShowError(language.Keys["WrongPwd"]);
        }
    }

    void SetLanguage(String lang)
    {
        language.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo(lang));
        InvokeAsync(StateHasChanged);
    }
}
