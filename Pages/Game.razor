@page "/Game"
@inject IModalService Modal

@using Model
@inject GameFieldModel GameField

<h1>Your Game</h1>
<button @onclick="ShowModal" class="btn btn-primary">New Game</button>

<div class="dice-game">
    @if (GameField != null)
    {
        @foreach (var piece in GameField.Pieces)
        {
            <svg id="@piece.Id"
                 @onclick="@(e => BtnKlick(piece))"
                 width="32"
                 height="32"
                 style="grid-area: @piece.X / @piece.Y ;"
                 viewBox="0 0 32 32">
                <defs>
                    <filter id="f3" x="0" y="0" width="200%" height="200%">
                        <feOffset result="offOut" in="SourceAlpha" dx="5" dy="5" />
                        <feGaussianBlur result="blurOut" in="offOut" stdDeviation="10" />
                        <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
                    </filter>
                    <filter id="f2" x="0" y="0" width="200%" height="200%">
                        <feOffset result="offOut" in="SourceGraphic" dx="5" dy="5" />
                        <feGaussianBlur result="blurOut" in="offOut" stdDeviation="10" />
                        <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
                    </filter>
                </defs>
                @if (piece.Changed && GameField.AllowMove)
                {
                    <rect stroke-width="1" stroke="#ff9900" id="bletrisbox" height="32" width="32" fill="#ff9900" x="0" y="0"></rect>
                }
                else
                {
                    <rect stroke-width="1" stroke="#000000" id="bletrisbox" height="32" width="32" fill="@piece.Color" x="0" y="0"></rect>
                }
                @if (piece.Changed)
                {
                    <circle stroke-width="1" stroke="@piece.ChangedColor" fill="#F2F5A9" cx="16" cy="16" r="14"></circle>
                }
                @if (piece.Meeple != null)
                {
                    if (piece.Meeple.Player.IsActive)
                    {
                        <path stroke-width="2" stroke="@piece.Meeple.Player.MarkColor" fill="@piece.Meeple.Player.Color" filter="url(#f2)"
                              d="M 23.97186,24.165478 H 6.7861122 L 12.25803,9.2803718 c -2.5349163,-6.9266389 8.335882,-7.0954101 6.206748,0 z"
                              id="path3713" />
                    }
                    else if (piece.Meeple.Player.IsPlaying)
                    {
                        <path stroke-width="1" stroke="#000000" fill="@piece.Meeple.Player.Color" filter="url(#f3)"
                              d="M 23.97186,24.165478 H 6.7861122 L 12.25803,9.2803718 c -2.5349163,-6.9266389 8.335882,-7.0954101 6.206748,0 z"
                              id="path3713" />
                    }
                }
            </svg>
        }
        
        <p style="grid-area: 3 / 9 / 4 / 10;" id="dice">@GameField.LastDiceView</p>
        @foreach (var player in GameField.Player)
        {
            if (player == null || !player.IsPlaying) continue;
            var idx = player.Id + 1;
            if (player.IsActive)
            {
                <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: bold;background-color: @player.BackColor;padding:2;height: 30px;">@player.LastDiceSeries</p>
                <button class="btn btn-primary" @onclick="BtnDice" autofocus style="grid-area:  @idx / 19; padding: 0;" disabled="@GameField.AllowMove"><span class="oi" aria-hidden="true">&#x1f3b2;</span></button>
                <button class="btn btn-primary" @onclick="BtnMove" autofocus style="grid-area:  @idx / 20; padding: 0;" disabled="@GameField.AllowDice"><span class="oi oi-action-redo" aria-hidden="true"></span></button>
            }
            else
            {
                <p style="grid-area: @idx / 21 / @idx / 24;color: @player.Color;font-weight: normal;background-color: @player.BackColor;padding:2;height: 30px;">@player.LastDiceSeries</p>
            }
        }
    }
</div>

@code {


    protected override async Task OnInitializedAsync()
    {


    }

    public void BtnDice()
    {
        GameField.DoDice();
        InvokeAsync(StateHasChanged);
    }

    public void BtnMove()
    {
        GameField.DoMove();
        InvokeAsync(StateHasChanged);
    }

    public void BtnKlick(PieceModel piece)
    {
        if (GameField.TryMove(piece)) InvokeAsync(StateHasChanged);
    }

    async Task ShowModal()
    {
        var messageForm = Modal.Show<NewGame>();
        var result = await messageForm.Result;

        if (!result.Cancelled)
        {
            var message = result.Data?.ToString() ?? string.Empty;
            GameField = new GameFieldModel();
        }
    }
}